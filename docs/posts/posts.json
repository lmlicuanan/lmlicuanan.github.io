[
  {
    "path": "posts/2022-02-03-demystifying-openstreetmap-data/",
    "title": "Demystifying OpenStreetMap Data",
    "description": "On accessing information from one of the largest repositories of (free) geospatial data.",
    "author": [
      {
        "name": "Lino Licuanan",
        "url": {}
      }
    ],
    "date": "2022-02-03",
    "categories": [
      "data-science",
      "geospatial"
    ],
    "contents": "\n\nContents\nIntroduction\nPrerequisites\nData & PreprocessingSetup\nBounding Box\nOverpass Queries\nsf Objects\nPreprocessing\nPipeline\n\nVisualization\n\n\n\n\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-9MHZYW9421');\nIntroduction\nOpenStreetMap is a platform for crowdsourcing geospatial information from basically anywhere volunteers are willing to go. This makes it one of the most powerful databases readily available to the public – contributors have been known to visit locations no single operator can reach (including Google). The database has use cases ranging from mapping far flung communities pre-calamity, to giving your Grab driver the best possible route.\n\n\n{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"http://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[12.8797,121.774,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[12.8797,12.8797],\"lng\":[121.774,121.774]},\"fitBounds\":[5.58,117.17,18.51,126.54,[]]},\"evals\":[],\"jsHooks\":[]}\nBelow I show just a very lightweight introduction for analysts looking to get their feet wet with OpenStreetMap’s API.\nPrerequisites\nMake sure the following packages are installed:\ntidyverse (Wickham et al. 2019) as a convenient collection of packages for data processing and analysis.\ntargets (Landau 2021) as a pipeline toolkit for optimizing runtime.\nsf (Pebesma 2018) for processing simple features, a popular standard for storing geospatial information.\nosmdata (Padgham et al. 2017) as an interface for transacting with the OpenStreetMap database.\nData & Preprocessing\nSetup\nLoading these packages immediately as they will be useful throughout. Notice also that we are clearing out any possible obsolete targets from previous runs (this is best practice when using targets).\n\n\nsuppressPackageStartupMessages({\n  library(targets)\n  library(tidyverse)\n  library(sf)\n  library(magrittr)\n  library(gt)\n})\n\ntar_unscript()\n\n\n\nWe set up the global environment for our pipeline. We set seed to guarantee reproducibility of some random sampling we are doing later on. This is different from the packages we just loaded in the sense that our targets exist in a separate environment.\n\ntar_option_set(packages = c(\"osmdata\", \"tidyverse\", \"sf\"))\nhttr::set_config(httr::config(ssl_verifypeer = FALSE))\nset.seed(2022)\n\nIt is generally advised to reset the requirement to verify certificates to TRUE once done. We disabled this only as a workaround to an existing issue.\nLoading sf objects tends to be a heavy process. We make extensive use of the targets framework to make sure code only runs if the chunk (or something upstream of it) changes. Absent of this, outputs are neatly stored as binaries, and accessed when needed.\nBounding Box\nOnce you are set up, we can start querying! All OSM queries start with what’s called a bounding box. This tells your query what the area of interest is – think of it like us cropping a blank canvas the size of the world map.\n\ntar_target(study_region.bb, getbb(\"Makati\", format_out = \"polygon\") %>% head(1))\n\nNotice that the targets syntax is variable name first, command to be assigned to the variable next.\nOverpass Queries\nOpenStreetMap data is served up by the Overpass API. We initialize a query to this API by giving opq() a bounding box and features we want to be found on our canvas. For our case, we are interested in administrative boundaries, roads, buildings, and amenities.\n\nlist(\n  tar_target(\n    city.ql, study_region.bb %>% opq() %>% \n      add_osm_feature(key = \"admin_level\", value = \"6\")\n  ),\n  tar_target(\n    boundary.ql, study_region.bb %>% opq() %>% \n      add_osm_feature(key = \"admin_level\", value = \"10\")\n  ),\n  tar_target(\n    road.ql, study_region.bb %>% opq() %>%\n      add_osm_feature(key = \"highway\")\n  ),\n  tar_target(\n    building.ql, study_region.bb %>% opq() %>%\n      add_osm_feature(key = \"building\")\n  ),\n  tar_target(\n    amenity.ql, study_region.bb %>% opq() %>%\n      add_osm_feature(key = \"amenity\")\n  )\n)\n\nThere is a wealth of other features you can add to your query – the keys for these can be conveniently found on the OpenStreetMap wiki.\nsf Objects\nQueries are just instructions. We execute these using osmdata_sf(). trim_osmdata(), meanwhile, is a handy way to retain only the sf objects that can be found within the study region’s polygon.\n\nlist(\n  tar_target(\n    city.sf, city.ql %>% osmdata_sf() %>% trim_osmdata(study_region.bb)\n  ),\n  tar_target(\n    boundary.sf, boundary.ql %>% osmdata_sf() %>% trim_osmdata(study_region.bb)\n  ),\n  tar_target(\n    road.sf, road.ql %>% osmdata_sf() %>% trim_osmdata(study_region.bb)\n  ),\n  tar_target(\n    building.sf, building.ql %>% osmdata_sf() %>% trim_osmdata(study_region.bb)\n  ),\n  tar_target(\n    amenity.sf, amenity.ql %>% osmdata_sf()\n  )\n)\n\nThis is confusing because didn’t we already clip the region via our Overpass queries? The difference is those cropped the area into a box. study_region.bb is actually a set of coordinates that hug Makati’s boundary – anything outside that polygon is taken out by trim_osmdata()\nWe keep all the amenities here as this will become useful to our visualizations later.\n\n\ntar_make()\n\n\n\n\n\nggplot() + \n  geom_sf(data = tar_read(city.sf) %$% osm_multipolygons) +\n  geom_sf(data = tar_read(boundary.sf) %$% osm_multipolygons) +\n  theme(\n    legend.position = \"none\",\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.background = element_blank()\n  ) + labs(caption = \"Barangay Boundaries, City of Makati\")\n\n\n\n\nPreprocessing\nAmenity Classification\nWe perform some data munging to classify important points of interest into tighter categories. You will notice we wrangle sf objects almost exactly as we would a dataframe. That’s because it is one! Just with special properties.\n\n\ntar_make()\n\n\n\nHere, amenity.sf contains various geometries (denoted by the prefix osm_) inside it – think of them like layers of objects on our canvas.\n\n\ntar_read(amenity.sf) %>% summary()\n\n\n                  Length Class  Mode     \nbbox                1    -none- character\noverpass_call       1    -none- character\nmeta                3    -none- list     \nosm_points        259    sf     list     \nosm_lines         201    sf     list     \nosm_polygons      201    sf     list     \nosm_multilines      0    -none- NULL     \nosm_multipolygons  49    sf     list     \n\n\nlist(\n  tar_target(\n    amenity_point.sf, amenity.sf$osm_points %>%\n      transmute(\n        amenity = case_when(\n          amenity == \"bank\" ~ \"bank\",\n          amenity %in% c(\"restaurant\", \"fast_food\") ~ \"restaurant\",\n          amenity %in% c(\"bar\", \"pub\", \"gambling\", \"nightclub\", \"casino\") ~ \"bar\",\n          amenity %in% c(\"bus_station\", \"taxi\", \"ferry_terminal\") ~ \"terminal\",\n          amenity %in% c(\"clinic\", \"hospital\", \"doctors\", \"dentist\") ~ \"hc_facility\",\n          amenity == \"pharmacy\" ~ \"pharmacy\",\n          amenity %in% c(\"school\", \"college\") ~ \"school\",\n          amenity == \"place_of_worship\" ~ \"place_of_worship\",\n          TRUE ~ NA_character_\n        ), value = TRUE\n      ) %>% mutate(amenity_key = amenity) %>%\n      filter(!is.na(amenity)) %>% spread(key = amenity_key, value = value, fill = FALSE)\n  )\n)\n\n\n\ntar_read(amenity_point.sf) %>% head(5) %>% gt()\n\n\n\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#rxbdtgajgt .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#rxbdtgajgt .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#rxbdtgajgt .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#rxbdtgajgt .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#rxbdtgajgt .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#rxbdtgajgt .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#rxbdtgajgt .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#rxbdtgajgt .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#rxbdtgajgt .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#rxbdtgajgt .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#rxbdtgajgt .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#rxbdtgajgt .gt_group_heading {\n  padding: 8px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#rxbdtgajgt .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#rxbdtgajgt .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#rxbdtgajgt .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#rxbdtgajgt .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#rxbdtgajgt .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 12px;\n}\n\n#rxbdtgajgt .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#rxbdtgajgt .gt_first_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n}\n\n#rxbdtgajgt .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#rxbdtgajgt .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#rxbdtgajgt .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#rxbdtgajgt .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#rxbdtgajgt .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#rxbdtgajgt .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding: 4px;\n}\n\n#rxbdtgajgt .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#rxbdtgajgt .gt_sourcenote {\n  font-size: 90%;\n  padding: 4px;\n}\n\n#rxbdtgajgt .gt_left {\n  text-align: left;\n}\n\n#rxbdtgajgt .gt_center {\n  text-align: center;\n}\n\n#rxbdtgajgt .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#rxbdtgajgt .gt_font_normal {\n  font-weight: normal;\n}\n\n#rxbdtgajgt .gt_font_bold {\n  font-weight: bold;\n}\n\n#rxbdtgajgt .gt_font_italic {\n  font-style: italic;\n}\n\n#rxbdtgajgt .gt_super {\n  font-size: 65%;\n}\n\n#rxbdtgajgt .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 65%;\n}\namenity\n      bank\n      bar\n      hc_facility\n      pharmacy\n      place_of_worship\n      restaurant\n      school\n      terminal\n      geometry\n    bank\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nc(120.9995315, 14.5378517)bank\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nc(121.0130289, 14.5601584)bank\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nc(121.0047117, 14.5562959)bank\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nc(121.0102058, 14.5593578)bank\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nc(121.0243357, 14.5580425)\n\nPutting our sf’s together, we get a map of Makati’s points of interest.\n\n\nggplot() + \n  geom_sf(data = tar_read(city.sf) %$% osm_multipolygons) +\n  geom_sf(data = tar_read(boundary.sf) %$% osm_multipolygons) +\n  geom_sf(data = tar_read(amenity_point.sf), \n          aes(group = amenity, colour = amenity), alpha = 0.6) + \n  theme(\n    legend.position = \"right\",\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.background = element_blank()\n  ) + labs(caption = \"Barangay Boundaries & Points of Interest, City of Makati\") +\n  scale_colour_viridis_d()\n\n\n\n\nMonte Carlo Sampling\nSomething we may be interested in doing is generating random samples on our study region. I sample 1000 below. I also make a point of only sampling within the city’s boundaries (you can do this for other objects, like only sampling within buildings).\nThrough aggregate, something cool you can also do is to compute parameters of interest within a radius of our sampled points. Here, I get a simple count of all establishments within 500m of each sample.\n\nlist(\n  tar_target(\n    mc_point.sf, st_as_sf(st_sample(city.sf$osm_multipolygons, 1000))\n  ),\n  tar_target(\n    mc_point_params.sf, aggregate(\n      amenity_point.sf,\n      mc_point.sf,\n      FUN = function(x) sum(as.logical(x), na.rm = TRUE),\n      join = function(x, y) st_is_within_distance(x, y, dist = 500)\n    ) %>% filter(!is.na(amenity))\n  )\n)\n\nIf you’re having a hard time grasping what is happening, a neat way of thinking about is amenity_point.sf is your raw data, and it is “pinched” at points mc_point.sf to compress all raw data within the radius into just mc_points.sf’s points. Therefore, expect just 1000 rows in your dataframe.\nPipeline\n\n\ntar_make()\n\n\n\nHere’s the graph of data transformations we just created, in case targets is starting to get a bit overwhelming!\n\n\ntar_visnetwork()\n\n\n\n{\"x\":{\"nodes\":{\"name\":[\"amenity_point.sf\",\"amenity.ql\",\"amenity.sf\",\"boundary.ql\",\"boundary.sf\",\"building.ql\",\"building.sf\",\"city.ql\",\"city.sf\",\"mc_point_params.sf\",\"mc_point.sf\",\"road.ql\",\"road.sf\",\"study_region.bb\"],\"type\":[\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\"],\"status\":[\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\"],\"seconds\":[0.287,3.928,14.312,0.001,71.375,0.002,3621.374,0.002,19.086,6.385,4.424,0.001,466.407,5.968],\"bytes\":[52430,252,565388,259,118965,255,8028241,260,41128,25766,15787,255,1077976,10696],\"branches\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"id\":[\"amenity_point.sf\",\"amenity.ql\",\"amenity.sf\",\"boundary.ql\",\"boundary.sf\",\"building.ql\",\"building.sf\",\"city.ql\",\"city.sf\",\"mc_point_params.sf\",\"mc_point.sf\",\"road.ql\",\"road.sf\",\"study_region.bb\"],\"label\":[\"amenity_point.sf\",\"amenity.ql\",\"amenity.sf\",\"boundary.ql\",\"boundary.sf\",\"building.ql\",\"building.sf\",\"city.ql\",\"city.sf\",\"mc_point_params.sf\",\"mc_point.sf\",\"road.ql\",\"road.sf\",\"study_region.bb\"],\"level\":[4,2,3,2,3,2,3,2,3,5,4,2,3,1],\"color\":[\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\"],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\"]},\"edges\":{\"from\":[\"city.sf\",\"study_region.bb\",\"boundary.ql\",\"study_region.bb\",\"study_region.bb\",\"amenity.sf\",\"study_region.bb\",\"amenity.ql\",\"amenity_point.sf\",\"mc_point.sf\",\"study_region.bb\",\"study_region.bb\",\"building.ql\",\"study_region.bb\",\"city.ql\",\"study_region.bb\",\"road.ql\",\"study_region.bb\"],\"to\":[\"mc_point.sf\",\"amenity.ql\",\"boundary.sf\",\"boundary.sf\",\"city.ql\",\"amenity_point.sf\",\"road.ql\",\"amenity.sf\",\"mc_point_params.sf\",\"mc_point_params.sf\",\"building.ql\",\"boundary.ql\",\"building.sf\",\"building.sf\",\"city.sf\",\"city.sf\",\"road.sf\",\"road.sf\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Up to date\",\"Stem\"],\"color\":[\"#354823\",\"#899DA4\"],\"shape\":[\"dot\",\"dot\"]},\"nodesToDataframe\":true}},\"evals\":[],\"jsHooks\":[]}\nVisualization\nWe’ve already snuck in some plots above, but let’s go even further here.\n\n\nbuilding.sf <- tar_read(building.sf)\ncity.sf <- tar_read(city.sf)\nboundary.sf <- tar_read(boundary.sf)\nroad.sf <- tar_read(road.sf)\namenity_point.sf <- tar_read(amenity_point.sf)\nmc_point_params.sf <- tar_read(mc_point_params.sf)\n\nggplot() +\n  geom_sf(data = city.sf %$% osm_multipolygons) +\n  geom_sf(data = boundary.sf %$% osm_multipolygons) +\n  geom_sf(data = amenity_point.sf %>% filter(bank), alpha = 0.8) +\n  geom_sf(data = mc_point_params.sf, \n          aes(alpha = bank, size = bank), col = \"red\") +\n  theme(\n    legend.position = \"right\",\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.background = element_blank()\n  ) +\n  scale_colour_viridis_d() +\n  labs(\n    caption = \"Bank density measured by counting bank branches within a 500-m radius.\"\n  )\n\n\n\n\nNotice above that our aggregated parameters are also counting banks outside the study region. This is a method of edge correction to make sure we capture reality, despite administrative boundaries. Imagine us trimming these points of interest prematurely – we would have concluded that points around Taguig’s boundary had little exposure to banks (which we all know is wrong).\nPutting it all together, we get this pretty cool plot.\n\n\nggplot() +\n  geom_sf(data = city.sf %$% osm_multipolygons) +\n  geom_sf(data = boundary.sf %$% osm_multipolygons) +\n  geom_sf(data = building.sf$osm_polygons) +\n  geom_sf(data = road.sf$osm_lines) +\n  geom_sf(data = amenity_point.sf %>% filter(!bank),\n          aes(group = amenity, colour = amenity),\n          alpha = 0.8) +\n  geom_sf(data = mc_point_params.sf, \n          aes(alpha = bank, size = bank), col = \"red\") +\n  theme(\n    legend.position = \"right\",\n    legend.title = element_text(size = 9), \n    legend.text = element_text(size = 8),\n    panel.grid = element_blank(),\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.background = element_blank()\n  ) +\n  scale_colour_viridis_d() +\n  labs(\n    caption = \"Bank density measured by counting bank branches within a 500-m radius.\"\n  )\n\n\n\n\nNow it’s possible to see patterns – banks seem to be clustering around that long highway on the left; banks and other points of interest seem to co-locate; there is definitely some spatial autocorrelation; etc.\nWe won’t cover spatial statistics here, but this should give you enough to go on!\nIf you found this useful or would like to collaborate with me, feel free to reach out at linolicuanan@gmail.com. For citing this article, use the BibTeX found below.\n\n\n\nLandau, William Michael. 2021. “The Targets R Package: A Dynamic Make-Like Function-Oriented Pipeline Toolkit for Reproducibility and High-Performance Computing.” Journal of Open Source Software 6 (57): 2959. https://doi.org/10.21105/joss.02959.\n\n\nPadgham, Mark, Bob Rudis, Robin Lovelace, and Maëlle Salmon. 2017. “Osmdata.” The Journal of Open Source Software 2 (14). https://doi.org/10.21105/joss.00305.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\n\n\n",
    "preview": "posts/2022-02-03-demystifying-openstreetmap-data/makati.png",
    "last_modified": "2022-02-05T09:24:04+08:00",
    "input_file": {}
  }
]
